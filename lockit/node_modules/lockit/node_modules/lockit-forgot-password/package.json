{
  "name": "lockit-forgot-password",
  "version": "0.0.3",
  "description": "forgot password middleware for lockit",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/zeMirco/lockit-forgot-account"
  },
  "keywords": [
    "lockit",
    "forgot",
    "password"
  ],
  "dependencies": {
    "node-uuid": "~1.4.1",
    "bcrypt": "~0.7.7"
  },
  "devDependencies": {
    "supertest": "~0.7.1",
    "should": "~1.2.2",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-mocha-test": "~0.7.0",
    "lockit-couchdb-adapter": "0.0.3",
    "lockit-sendmail": "~0.0.2",
    "nano": "~4.1.1",
    "express": "3.3.5",
    "jade": "*"
  },
  "readme": "# forgot password middleware for lockit\n\n[![Build Status](https://travis-ci.org/zeMirco/lockit-forgot-password.png?branch=master)](https://travis-ci.org/zeMirco/lockit-forgot-password)\n\nwork in progress - come back later\n\n## Installation\n\n`npm install lockit-forgot-password`\n\n```js\nvar config = require('./config.js');\nvar forgotPassword = require('lockit-forgot-password');\n\nvar app = express();\n\n// express settings\n// ...\n\n// sessions are required - either cookie or some sort of db\napp.use(express.cookieParser('your secret here'));\napp.use(express.cookieSession());\napp.use(app.router);\n\n// use middleware after router so it doesn't interfere with your own routes\nforgotPassword(app, config);\n\n// serve static files as last middleware\napp.use(express.static(path.join(__dirname, 'public')));\n```\n\n## What do I get?\n\n - [GET /forgot-password](#get-forgot-password)\n - [POST /forgot-password](#post-forgot-password)\n - [GET /forgot-password/:token](#get-forgot-passwordtoken)\n - [POST /forgot-password/:token](#post-forgot-passwordtoken)\n\n#### GET /forgot-password\n\n - render `get-forgot-password` template with input field for `email`\n\n#### POST /forgot-password\n\n - verify that `email` isn't empty and is a valid email address\n - find user with given `email` in database\n - no user found -> render `post-forgot-password` template with success message to pretend we've sent an email\n - delete old password hash\n - create the `token` and expiration date for `token`\n - save new user details to db\n - send an email with link containing the `token`\n - render `post-forgot-password` template containing success message\n\n#### GET /forgot-password/:token\n\n - verify format of `token`\n - `token` has the wrong format -> continue with error handling middleware\n - find user with given `token` in db\n - no user found -> continue with error handling middleware\n - check if token has expired\n - token has expired -> delete token and token expiration date for user\n - token has expired -> save user to db and render `link-expired` template\n - render `get-new-password` template with input field for `password`\n\n#### POST /forgot-password/:token\n\n - verify format of `token`\n - `token` has the wrong format -> continue with error handling middleware\n - check that `password` isn't empty\n - `password` is empty -> render `get-new-password` with error message\n - find user with given `token` in db\n - no user found -> continue with error handling middleware\n - create hash of given `password` with bcrypt\n - delete token and token expiration date for user\n - save new user details to db\n - render `change-password-success` template with success message\n\n## Test\n\n`grunt`\n\n## License\n\nCopyright (C) 2013 [Mirco Zeiss](mailto: mirco.zeiss@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zeMirco/lockit-forgot-account/issues"
  },
  "homepage": "https://github.com/zeMirco/lockit-forgot-account",
  "_id": "lockit-forgot-password@0.0.3",
  "_from": "lockit-forgot-password@0.0.3"
}
